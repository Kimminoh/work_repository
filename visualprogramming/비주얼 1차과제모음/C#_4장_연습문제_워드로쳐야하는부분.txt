[C# 4장 과제 : 워드로 쳐야하는 부분] 


4-4 
(1) 둘 다 접근 수정자에 해당하며, public은 같은클래스, 파생클래스, 동일 네임스페이스, 다른 네임스페이스, 모든 클래스에서 사용가능한 반면 
private은 오직 같은 클래스에서만 사용 가능하게 하는 접근수정자이다.
예)
private int private_field;
public int public_field;

(2) 둘의 공통점은 접근수정자 중 파생클래스 관련한 접근수정자 이다. 단, protected는 같은 클래스와 파생클래스에서만 접근가능하게 한다면, protected internal은 같은 클래스, 파생클래스 뿐만 아니라 동일한 네임스페이스까지 접근 가능하게 하는 일종의 확장판의 개념으로 이해하라.

(3) instance variable은 객체 변수, 인스턴스 필드라고 하며 객체가 생성되고 그 객체마다 가질 수 있는 필드를 의미한다. 해당 필드는 객체를 통해 참조할 수 있다. new 지정어로 객체를 생성될 때 해당 객체를 통해 필드에 접근할 수 있다.
static variable은 정적 변수, 정적 필드라고 하며 static 수정자 통해 선언한 필드를 의미한다. 해당 필드는 (반드시 꼭) 클래스의 이름을 통해서만 가능하며 객체를 통해서는 절대 참조할 수 없다. (추가로 인스턴스 객체에 정적 필드는 존재할  수 없다. 정적 필드는 객체 생성 전에 만들어지기 때문이다.)

(4) call by value = 값에 의한 호출을 의미하며 실 매개변수의 값이 복사되어서 형식 매개변수로 전달되는 것을 의미하며 이때 실제로 전달한 값은 값이 복사되어 전달되었기 때문에 변하지않는다. 
call by reference = 주소 호출(call by address)라고도 불리며, 실 매개변수의 주소가 형식 매개변수로 전달되는 것을 의미하며, 메소드를 호출할 시 실제 값이 변경되게 된다. 이 때 참조호출을 이루는 방법은 두 가지가 존재하는데 매개변수 수정자를 사용하는 방법(ref와 out)과 객체를 참조하여 바꾸는 방법이 존재한다.

(5) ref와 out 기능은 둘 다 주소를 전달해주는 기능으로 동일하지만, ref는 메소드로부터 매개변수가 전달될 때, 반드시 초기화된 값이 와야하지만, out은 그러지않아도 된다는 것이 유일한 차이점이다. 

(6) 프로퍼티는 클래스의 private 필드를 형식적으로 다루는 일종의 메소드이고, 메소드(method)는 객체의 행위를 기술하는 방법으로 상태를 검색, 변경하는 작업, 특정한 행동을 처리하는 코드를 포함한다.
메소드는 일종의 큰 범주이며, 프로퍼티는 메소드에 속한다고 볼 수 있다.
프로퍼티는 메소드의 일종으로 get과 set으로 구분된다. 프로퍼티는 메소드로 만들 수 있다.(형식적으로)
해당 C#에서는 아예 메소드화 시켰으며, 필드처럼 사용되게 편의성을 높인것이 특징이다.

(7) set-accessor : 셋 접근자라고 불리며, 값을 지정할 때 사용, value라는 지정어 사용, 매개변수 역할을 하며 배정 연산의 우측식이 연산결과를 전달받음
get-accessor : 겟 접근자, 값을 받아올때(참조할 때) 사용

(8) operator overloading(연산자 중복) : (기존 자료형과 연산자들의 의미를 재정의하는 것)
시스템에서 제공한 연산자를 특정 클래스만을 위한 연산의 의미를 갖도록 재정의하는 것, 자료 추상화를 이루며, 유지보수가 쉬워짐 

method overloading(메소드 중복) : 메소드의 시그니처를 다르게 하여 이름을 같으나 다른 메소드처럼 사용하는 것(이름 동일, 개수와 매개변수 형 다름)
즉, 메소드를 매개변수에 따라 선택하게 하기위한 방법론 중 하나

(9) ...

(10) ...

(11)...

(12) 클래스와 구조체 거의 동일하지만, 가장 큰 차이점은 클래스는 참조형, 구조체는 값형이다. 클래스는 힙에, 구조체는 스택에 저장되며, 구조체는 사옷ㄱ이 불가능하며, 구조체는 생성자, 소멸자 개념이 존재하지않는다.그러므로 당연하게도 구조체에는 멤버의 초기값 개념을 부여할 수 없다.



4-5. 간략히 설명
(1) public : 모든 클래스, 같은 클래스, 파생 클래스, 동일 네임스페이스, 다른 네임스페이스 
private : 같은 클래스만
protected : 같은 클래스와 파생 클래스에서만
internal : 같은 클래스와 동일 네임스페이스서만 
protected internal : 같은 클래스와 파생클래스 그리고 동일 네임스페이스

(2) 매개변수의 개수가 같고 매개변수의 형이 다른 경우 -> 컴파일러가 해당 메소드를 선택하고 해당하는 형이 존재하지않으면 기본적인 형 변환에 의해 실 매개변수의 자료형을 형식 매개변수의 자료형으로 바꿀 수 있는 메소드를 선택한다.(p174)

(3) 프로퍼티의 수정자 = 메소드의 수정자
new, static, virtual, sealed, override, abstract, extern(p.181)

(4) 연산자 중복 형태(p.197)

public static [extern] 리턴타입 operator (연산자형태)(매개변수1, 매개변수2) { ... 몸통... ;}
=> 무조건		=> 선택					 =>, +, - 와 같은것	=>, [ , ]도 가능

(5) 사용자 정의 형 변환은 클래스나 객체나 구조체를 다른 클래스 객체나 구조체 또는 C# 기본자료형으로 변환하는 기능으로 해당 변환을 직접 사용자가 정의하는 것을 의미한다. (객체, 클래스 <---> 다른 클래스 객체 , 클래스, 기본자료형)

단항 연산자이므로 매개변수는 항상 1개, 매개변수형은 변환을 하고싶은 형태를 적어야함 
explicit(명시적) , implicit(묵시적)  중 하나로 정의되어야한다.
(p202~203의 킬로미터와 마일 자동 변환을 보아라)

(6,7은 윈폼 관련 부분)


4-6 에러를 밝히고, 이유를 적어라

1. Dummy.instanceVariable=10;은 불가능, 클래스 명으로 참조가능한것은 오직 정적 필드인 static int staticVariable과 public static readonly int NORMAL 뿐 ===> 수정 : d.instanceVariable=10; 

2. Dummy.NORMAL=5; 는 불가능
why -> Dummy.NORMAL; 처럼 호출만 가능하도록 readonly 수정자가 붙음, 그러므로 해당 =5처럼 배정문이 붙을 수 없음

3. d.staticVariable = 10; 은 불가능
why-> 객체로 참조가 불가능한 정적 필드이다. 



4. const int MIN = MAX -100;
const int MAX = MIN + 100;

why -> 순환 정의로 인해 참조 시, 예상치못한 값 발생과 const int MIN 부분이 컴파일 오류가 난다.(직접 하였음)
(순환 정의 참조 오류)


4-7 실행결과 작성
(1)  Before : x= 1, y=1
Inc : x= 2, y=2
After : x=2, y=1

이유-> x만 ref 매개변수 수정자로 참조하였으므로

(2) 델리게이트 관련...

4-8 프로퍼티=> 메소드로

(필드먼저!)
private int numerator;

public int getNumerator() { return numerator; }
public void setNumerator(int numerator) { this.numerator=numerator; }


2개의 메소드로 바꿀 수 있음(자바식)


 